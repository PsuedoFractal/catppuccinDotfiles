;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; LeftSide Widgets ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;; OS Icon Widget ;;
(defwidget osIcon []
  (box: orientation "h"
      : space-evenly "false"
    (button: class "os_icon"
            :onclick "alacritty" ""
    )
  )
)

;;Workspace Widget ;;
(defwidget workspaces []
	(box	:class "works"
			:orientation "h"
			:halign "start"
			:valign "center"
			:space-evenly "false"
			:spacing "-5"

			(button :onclick "bspc desktop -f 1" :class "Home" "")
			(button :onclick "bspc desktop -f 2" :class "Firefox" "")
			(button :onclick "bspc desktop -f 3" :class "Coding" "")
			(button :onclick "bspc desktop -f 4" :class "Gaming" "")
			(button :onclick "bspc desktop -f 5" :class "Media" "")
	)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Music Widget ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwidget music []
	(box :orientation "h"
		 :space-evenly false
		 :class
	)
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Controller Widgets ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Battery Widgets ;;
(defwidget battery []
	(box	:orientation "h"	
			  :space-evenly "false"
	  (label	:class "battery"		
			:halign "end"		
			:text battery	
			:tooltip "Battery: ${battery-cappacity}%")))
(defpoll battery			:interval "1s"	"scripts/battery icon")
(defpoll battery-cappacity	:interval "1s"	"scripts/battery percent")

;; Wifi Widgets ;;
(defwidget wifi []
	(box		:orientation "v"  
				:tooltip wifi-name
	(button		:onclick "scripts/popup wifi" 
				:class "wifi-icon" wifi-icon)))
(defpoll wifi-icon :interval "1s" "scripts/wifi icon")
(defpoll wifi-name :interval "1s" "scripts/wifi name")

;; Brightness Widgets ;;
(defwidget bright []
  (eventbox :onhover "${eww} update bright=true"   
  			:onhoverlost "${eww} update bright=false"
  			(box    :orientation "h"  
			  		:space-evenly "false"  
					:spacing 2
  			(revealer :transition "slideleft" 
			  		  :reveal bright   
					  :duration "250ms"
  			(scale :class "bribar" 
			  	   :value current-brightness 
				   :tooltip "Brightness: ${current-brightness}%" 
				   :onchange "brightnessctl set {}%" 
				   :orientation "h" 
				   :flipped true 
				   :max 101
				   :min 19))
  			(label :class "brightness-icon" 
			  	   :text ""))))
(defpoll current-brightness :interval "1s" "brightnessctl -m -d amdgpu_bl0 | awk -F, '{print substr($4, 0, length($4)-1)}' | tr -d '%'")
(defvar bright false)

  ;; Volume Widgets ;;
(defwidget volum []
	(eventbox :onhover "${eww} update volum=true" 		
			  :onhoverlost "${eww} update volum=false"
	(box      :orientation "h" 	  
			  :space-evenly "false" 
			  :spacing "2"
	(revealer :transition "slideleft" 
			  :reveal volum         
			  :duration "250ms"
	(scale    :class "volbar" 	  
			  :value current-volume 
			  :orientation "h"      
			  :flipped true 
			  :tooltip "Volume: ${current-volume}%" 
			  :max 101
			  :min 0 
			  :onchange "amixer -D pulse sset Master {}%" ))
	(button   :onclick "scripts/popup audio"   :class "volume-icon" ""))))
(defpoll current-volume :interval "1s" "amixer -D pulse sget Master | grep 'Left:' | awk -F'[][]' '{ print $2 }' | tr -d '%'")
(defvar volum false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;; RightSide Widgets ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Time Widget ;;

(defwidget time []
	(box	:orientation "h" 
			:class "time" 
			:valign "end"
	(button	:onclick "scripts/popup calendar"	
			:class "time-hour" hour)
	(button	:onclick "scripts/popup calendar"	
			:class "time-min"  min)))
(defpoll hour	:interval "1s"	"date '+%H'")
(defpoll min	:interval "1s"	"date '+%M'")

;; Calender Widget ;;

(defwidget cal []
	(box :class "cal-box" 
		 :orientation "v"
	(box :class "cal-inner-box"
	(calendar :class "cal" 
			  :day calendar_day 
			  :month calendar_month 
			  :year calendar_year))))
(defpoll calendar_day :interval "10h"
    "date '+%d'")
(defpoll calendar_month :interval "10h"
    "scripts/calendar")
(defpoll calendar_year :interval "10h"
    "date '+%Y'")

;; Powermenu Widgets ;;
(defwidget power []
	(eventbox	:onhover "${eww} update power=true"	
				:onhoverlost "${eww} update power=false" 
	(box		:orientation "h"					
				:space-evenly "false" 	 
				:vexpand "false" 	
				:class "powermenu"
	(revealer	:transition "slideleft"				
				:reveal power			 
				:duration "250ms"
	(box		:orientation "h"					
				:space-evenly "false"

	(button   	:class "button-bspres"  			
				:tooltip "BSPWM Restart" 
				:onclick "bspc wm -r" "" )

  	(button		:class "button-reb"					
	  			:tooltip "Reboot"		 
				:onclick "reboot"	"")

	(button		:class "button-quit" 				
				:tooltip "Logout" 		 
				:onclick "killall bspwm" "")

	(button		:class "button-lock" 				
				:tooltip "Lock Screen"	 
				:onclick "betterlockscreen -l"	"")))

	(button		:class "button-off"					
				:tooltip "Shutdown"		 
				:onclick "shutdown now"	""))))
(defvar power false)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;; Arrangement Location ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Left Side Widgets ;;
(defwidget left []
	(box :orientation "h"
		 :space-evenly false
		 :halign "start"
		 :valign "center"
	
	(osIcon)
	(workspaces)
	)
)



;; Control Panel Widgets ;;	
(defwidget control []
	(box :orientation "h" 
		 :space-evenly false
		 :halign "center"
		 :valign "center"
		 :class "control"

(volum)
(bat)
(bright)
(wifi)
))

(defwidget timeAndPower []
	(box :orientation "h"
		 :space-evenly false
		 :halign "center"
		 :valign "center"

	(time)
	(power)
	)
)

;; Right Side Widgets ;;

(defwidget right []
	(box :orientation "h"
		 :space-evenly false
		 :halign "end"
		 :valign "center"

	(control)
	(timeAndPower)
	)
)



